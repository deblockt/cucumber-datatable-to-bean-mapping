plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly 'io.cucumber:cucumber-core:7.8.1'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'

    testImplementation 'io.cucumber:cucumber-java:7.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

// Publish to oss sonatype repo

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cucumber-datatable-to-bean-mapping'
            groupId = 'io.github.deblockt'

            from components.java
            pom {
                name = 'cucumber datatable to bean mapping'
                description = 'A library to perform automatic mapping between cucumber datatable and Java bean.'
                url = 'https://github.com/deblockt/cucumber-datatable-to-bean-mapping'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'deblockt'
                        name = 'Thomas Deblock'
                        email = 'deblock.thomas.62@gmail.com'
                        url = 'https://github.com/deblockt'
                    }
                }

                scm {
                    connection = 'https://github.com/deblockt/cucumber-datatable-to-bean-mapping.git'
                    developerConnection = 'https://github.com/deblockt/cucumber-datatable-to-bean-mapping.git'
                    url = 'https://github.com/deblockt/cucumber-datatable-to-bean-mapping'
                }
            }
        }
    }

    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        if (signingKey !== null && signingPassword != null) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }

        sign publishing.publications.mavenJava
    }
}